{
	"info": {
		"_postman_id": "41cb99df-59da-4568-9a31-68bbdd1a379b",
		"name": "Publish to Partner Workspace",
		"description": "# Create Rest Assets\n\nStandardizing practices & process automation by\n\n*   Automating controls\n*   Enforcing standards\n*   Generating evidence\n    \n\n![](https://i.imgur.com/9E9b8gf.png)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23357111"
	},
	"item": [
		{
			"name": "Publish",
			"item": [
				{
					"name": "Fetch Schema from GItHub",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(pm.response.text());",
									"var base64content = jsonData.content;",
									"var buff = new Buffer(base64content, 'base64');",
									"var content = buff.toString('ascii');",
									"let schemaJSON = JSON.stringify(JSON.parse(buff.toString('ascii'))); ",
									"pm.collectionVariables.set(\"string_schema\",  (JSON.stringify(schemaJSON)).substr(1).slice(0, -1));",
									"pm.collectionVariables.set(\"schemaTitle\",JSON.parse(content).info.title);",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"pm.collectionVariables.set(\"UID_apiVersion\",\"\");",
									"pm.collectionVariables.set(\"UID_API\",\"\");",
									"",
									"pm.collectionVariables.set(\"UID_schema\",\"\");",
									"pm.collectionVariables.set(\"string_schema\",\"\");",
									"",
									"",
									"",
									"",
									"pm.collectionVariables.set(\"UID_environment\",\"\");",
									"pm.collectionVariables.set(\"UID_monitor\",\"\");",
									"pm.collectionVariables.set(\"UID_mock\",\"\");",
									"pm.collectionVariables.set(\"URL_mock\",\"\");",
									"pm.collectionVariables.set(\"UID_collection\",\"\");",
									"pm.collectionVariables.set(\"randomInt\",\"\");",
									"pm.collectionVariables.set(\"schemaTitle\",\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{GitHubPAT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{GitHubBaseURL}}/repos/{{GitHubRepoSlug}}/contents/{{GitHubRepoPath}}/{{GitHubSchemaFilename}}",
							"host": [
								"{{GitHubBaseURL}}"
							],
							"path": [
								"repos",
								"{{GitHubRepoSlug}}",
								"contents",
								"{{GitHubRepoPath}}",
								"{{GitHubSchemaFilename}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create API",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"UID_API\", jsonData.api.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Should have valid response\", function () {",
									"    pm.expect(jsonData.api).to.include.all.keys('id', 'name', 'createdAt', 'createdBy', 'updatedAt', 'updatedBy');",
									"    ",
									"    // pm.expect(jsonData.api.name).to.be.equal('New API');",
									"    pm.expect(jsonData.api.id).to.be.ok;",
									"    pm.expect(jsonData.api.createdAt).to.be.ok;",
									"    pm.expect(jsonData.api.createdBy).to.be.ok;",
									"    pm.expect(jsonData.api.updatedAt).to.be.ok;",
									"    pm.expect(jsonData.api.updatedBy).to.be.ok;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"api\": {\n        \"name\": \"{{schemaTitle}}\",\n        \"summary\": \"{{$randomJobTitle}}\",\n        \"description\": \"{{$randomJobDescriptor}}\"\n    }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.getpostman.com/apis?workspace={{UID_TargetWorkspace}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{UID_TargetWorkspace}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All API Versions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"// Set the DRAFT versionId as an env variable",
									"pm.collectionVariables.set('UID_apiVersion', jsonData.versions[0].id)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/apis/{{UID_API}}/versions",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"apis",
								"{{UID_API}}",
								"versions"
							]
						},
						"description": "This call fetches details about the all the API Versions in the specified API.\n\nThe response will contain an array `versions` object which would be a list of all the API Version along with their details.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
					},
					"response": []
				},
				{
					"name": "Create Schema",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"// Set the UID_schema in the env variable",
									"pm.collectionVariables.set('UID_schema', jsonData.schema.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"name": "Content-Type",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"schema\": {\n\t\t\"language\": \"json\",\n\t\t\"schema\":\"{{string_schema}}\",\n\t\t\"type\": \"openapi3\"\n\t}\n}"
						},
						"url": {
							"raw": "https://api.getpostman.com/apis/{{UID_API}}/versions/{{UID_apiVersion}}/schemas",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"apis",
								"{{UID_API}}",
								"versions",
								"{{UID_apiVersion}}",
								"schemas"
							]
						},
						"description": "Creates a schema. The request body must contain a `schema` object with the following properties:\n\n*   `type` — A **string** value that contains the schema's type. One of:\n    *   `openapi3_1`\n    *   `openapi3`\n    *   `openapi2`\n    *   `openapi1`\n    *   `raml`\n    *   `raml1`\n    *   `wsdl1`\n    *   `wsdl2`\n    *   `graphql`\n    *   `proto2`\n    *   `graphql`\n    *   `proto3`\n*   `language` — A **string** value that contains the schema's language. One of:\n    *   OpenAPI and RAML — `json` or `yaml`\n    *   GraphQL — `graphql`\n    *   WSDL — `xml`\n    *   Protobuf — `proto`\n*   `schema` — Optional. A **string** value that contains the schema's contents.\n    \n\n> Requires an API Key as the `X-Api-Key` request header or an `apikey` URL query parameter."
					},
					"response": []
				},
				{
					"name": "Create collection from schema",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"// Set the colllectionId in the env variable",
									"pm.collectionVariables.set('UID_collection', jsonData.collection.uid)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{schemaTitle}}\",\n\t\"relations\": [\n\t\t{\n\t\t\t\"type\": \"documentation\"\n        },\n        {\n            \"type\": \"integrationtest\"\n        },\n        {\n            \"type\": \"testsuite\"\n\t\t}\t\n\t]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.getpostman.com/apis/{{UID_API}}/versions/{{UID_apiVersion}}/schemas/{{UID_schema}}/collections?workspace={{UID_TargetWorkspace}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"apis",
								"{{UID_API}}",
								"versions",
								"{{UID_apiVersion}}",
								"schemas",
								"{{UID_schema}}",
								"collections"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{UID_TargetWorkspace}}"
								}
							]
						},
						"description": "This call creates a collection and links it to an API as one or multiple relations. \n\nRequest body requires two keys:\n- `name` - Name of the collection to be created.\n- `relations` - A list of relation(s) to be created.\n\nThe allowed relation types are `contracttest`, `integrationtest`, `testsuite`, and `documentation`.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
					},
					"response": []
				},
				{
					"name": "Create Mock",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"// Set the URL_mock in the env variable",
									"pm.collectionVariables.set('URL_mock', jsonData.mock.mockUrl);",
									"pm.collectionVariables.set('UID_mock', jsonData.mock.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"mock\": {\n        \"name\": \"{{schemaTitle}}\",\n\t\t\"collection\": \"{{UID_collection}}\"\n\t}\n}"
						},
						"url": {
							"raw": "https://api.getpostman.com/mocks?workspace={{UID_TargetWorkspace}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"mocks"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{UID_TargetWorkspace}}"
								}
							]
						},
						"description": "This endpoint allows you to create a mock on a collection. You can also provide an environment UID to resolve any environment variables in the collection.\n\nYou can also specify the context of a workspace to create a mock in directly by passing the `workspace` as a query param.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
					},
					"response": []
				},
				{
					"name": "Create Environment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"// Set the environmentID in the env variable",
									"pm.collectionVariables.set('UID_environment', jsonData.environment.uid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"environment\": {\n        \"name\": \"{{schemaTitle}}\",\n        \"values\": [\n            {\n                \"key\": \"baseUrl\",\n                \"value\": \"{{URL_mock}}\"\n            }\n            ,{\n                \"key\":\"UID_API\"\n                ,\"value\":\"{{UID_API}}\"\n            }\n            ,{\n                \"key\":\"UID_apiVersion\"\n                ,\"value\":\"{{UID_apiVersion}}\"\n            }\n            ,{\n                \"key\":\"UID_schema\"\n                ,\"value\":\"{{UID_schema}}\"\n            }\n            ,{\n                \"key\":\"UID_lintingMonitor\"\n                ,\"value\":\"{{UID_lintingMonitor}}\"\n            }\n            ,{\n                \"key\":\"UID_lintingCollection\"\n                ,\"value\":\"{{UID_lintingCollection}}\"\n            }\n            ,{\n                \"key\":\"UID_environment\"\n                ,\"value\":\"{{UID_environment}}\"\n            }\n            ,{\n                \"key\":\"UID_monitor\"\n                ,\"value\":\"{{UID_monitor}}\"\n            }\n            ,{\n                \"key\":\"UID_mock\"\n                ,\"value\":\"{{UID_mock}}\"\n            }\n            ,{\n                \"key\":\"UID_collection\"\n                ,\"value\":\"{{UID_collection}}\"\n            }\n        ]\n    }\n}"
						},
						"url": {
							"raw": "https://api.getpostman.com/environments?workspace={{UID_TargetWorkspace}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"environments"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{UID_TargetWorkspace}}"
								}
							]
						},
						"description": "A sample body is added to the request that conforms to the following JSON schema:\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"environment\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\n              \"type\": \"string\",\n              \"maxLength\": 254,\n              \"minLength\": 1\n            },\n        \"values\": {\n          \"type\": \"array\",\n          \"maxItems\": 100,\n          \"additionalItems\": false,\n          \"items\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"key\": {\n                  \"type\": \"string\",\n                  \"maxLength\": 254\n                  \"minLength\": 1\n                },\n                \"value\": { \"type\": \"string\" },\n                \"enabled\": { \"type\": \"boolean\" }\n              },\n              \"required\": [\"key\", \"value\"]\n            }\n        }\n      },\n      \"required\": [\"name\"]\n    }\n  },\n  \"required\": [\"environment\"]\n}\n```\n\nOn successful creation of the environment, the API returns the environment name and `id`.\n\nYou can also specify the context of a workspace to create an environment in directly by passing the `workspace` as a query param.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
					},
					"response": []
				},
				{
					"name": "Create Monitor",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"// Set the environmentID in the env variable",
									"pm.collectionVariables.set('UID_monitor', jsonData.monitor.uid)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"monitor\": {\n    \"name\": \"{{schemaTitle}} monitor\",\n    \"schedule\": {\n      \"cron\": \"*/5 * * * *\",\n      \"timezone\": \"America/Cancun\"\n    },\n    \"collection\": \"{{UID_collection}}\",\n    \"environment\": \"{{UID_environment}}\"\n  }\n}"
						},
						"url": {
							"raw": "https://api.getpostman.com/monitors?workspace={{UID_TargetWorkspace}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"monitors"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{UID_TargetWorkspace}}"
								}
							]
						},
						"description": "This endpoint allows you to create a monitor.\n\nSome sample `cron` values are:\n\n| Frequency                  | Cron Pattern   |\n|-----------------------|----------------|\n| Every 5 minutes       | `*/5 * * * *`  |\n| Every 30 minutes     | `*/30 * * * *` |\n| Every Hour         | `0 */1 * * *`  |\n| Every 6 Hours      | `0 */6 * * *`  |\n| Every day at 5pm    | `0 17 * * *`   |\n| Every Monday at 12pm  | `0 12 * * MON` |\n| Every weekday (Monday - Friday) at 6am | `0 6 * * MON-FRI` |\n\nNote: Currently, you can only create monitors at some limited schedules. You can head to [Postman Monitors](https://monitor.getpostman.com) to see the allowed schedules. \n\nFor more information about the format of the `timezone` value, check this [list of time zones.](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)\n\nYou can also specify the context of a workspace to create a monitor in directly by passing the `workspace` as a query param.\n\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
					},
					"response": []
				},
				{
					"name": "Create Relations",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"mock\" : [\"{{UID_mock}}\"],\n    \"monitor\": [\"{{UID_monitor}}\"],\n    \"environment\" : [\"{{UID_environment}}\"]\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.getpostman.com/apis/{{UID_API}}/versions/{{UID_apiVersion}}/relations",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"apis",
								"{{UID_API}}",
								"versions",
								"{{UID_apiVersion}}",
								"relations"
							]
						},
						"description": "This call allows you to add existing Postman entities as new relations to an API. The request body should contain the relations to be created along with an array of entity IDs. \n\n<table>\n  <tr>\n    <th>Relation</th>\n    <th>Entity ID type</th>\n  <tr>\n  <tr>\n    <td>contracttest</td>\n    <td>Collection UIDs</td>\n  </tr>\n  <tr>\n    <td>integrationtest</td>\n    <td>Collection UIDs</td>\n  </tr>\n  <tr>\n    <td>documentation</td>\n    <td>Collection UIDs</td>\n  </tr>\n  <tr>\n    <td>testsuite</td>\n    <td>Collection UIDs</td>\n  </tr>\n  <tr>\n    <td>environment</td>\n    <td>Environment UIDs</td>\n  </tr>\n  <tr>\n    <td>mock</td>\n    <td>Mock IDs</td>\n  </tr>\n  <tr>\n    <td>monitor</td>\n    <td>Monitor IDs</td>\n  </tr>\n</table>\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
					},
					"response": []
				}
			],
			"description": "#### What are we doing here?\n\nImproving Developer Experience: **Automating** the process of setting up a Postman environment to allow developers to start building, testing and documenting APIs.\n\n1.  APIs must have documentation\n2.  APIs must have tests\n3.  APIs must have observability\n4.  Mock Servers help developers, QA, front end engineers quickly understand how the API functions.\n    \n\n![](https://i.imgur.com/UGJzFzW.png)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Reset",
			"item": [
				{
					"name": "Delete Collection",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/collections/{{UID_collection}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"collections",
								"{{UID_collection}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete environment",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/environments/{{UID_environment}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"environments",
								"{{UID_environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Mock",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/mocks/{{UID_mock}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"mocks",
								"{{UID_mock}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API Version",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/apis/{{UID_API}}/versions/{{UID_apiVersion}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"apis",
								"{{UID_API}}",
								"versions",
								"{{UID_apiVersion}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Monitor",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/monitors/{{UID_monitor}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"monitors",
								"{{UID_monitor}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/apis/{{UID_API}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"apis",
								"{{UID_API}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test",
			"item": [
				{
					"name": "Get collection",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{postmanAPIKey}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "x-api-key",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/collections/{{UID_collection}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"collections",
								"{{UID_collection}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "",
				"type": "string"
			},
			{
				"key": "key",
				"value": "x-api-key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "GitHubPAT",
			"value": "",
			"type": "string"
		},
		{
			"key": "postmanAPIKey",
			"value": "",
			"type": "string"
		},
		{
			"key": "GitHubBaseURL",
			"value": "https://api.github.com",
			"type": "string"
		},
		{
			"key": "GitHubRepoSlug",
			"value": "bryancross/Postman-stuff",
			"type": "string"
		},
		{
			"key": "GitHubRepoPath",
			"value": "postman/schemas",
			"type": "string"
		},
		{
			"key": "GitHubSchemaFilename",
			"value": "catfacts.json",
			"type": "string"
		},
		{
			"key": "schemaTitle",
			"value": "<<set at runtime>>",
			"type": "string"
		},
		{
			"key": "string_schema",
			"value": "<<set at runtime>>",
			"type": "string"
		},
		{
			"key": "UID_TargetWorkspace",
			"value": "<<Workspace ID in which to create assets>>",
			"type": "string"
		},
		{
			"key": "UID_API",
			"value": "<<set at runtime>>",
			"type": "string"
		},
		{
			"key": "UID_apiVersion",
			"value": "<<set at runtime>>",
			"type": "string"
		},
		{
			"key": "UID_schema",
			"value": "<<set at runtime>>",
			"type": "string"
		},
		{
			"key": "UID_collection",
			"value": "<<set at runtime>>"
		},
		{
			"key": "UID_mock",
			"value": "<<set at runtime>>"
		},
		{
			"key": "URL_mock",
			"value": "<<set at runtime>>",
			"type": "string"
		},
		{
			"key": "UID_environment",
			"value": "<<set at runtime>>"
		},
		{
			"key": "UID_monitor",
			"value": "<<set at runtime>>"
		},
		{
			"key": "randomInt",
			"value": ""
		}
	]
}
