{
	"info": {
		"_postman_id": "829c6357-b8a5-4918-94d6-ace9026c855a",
		"name": "Reusable Test Code from GitHub",
		"description": "## Overview\n\nRetrieve and execute Postman tests from a GitHub repo. Requires a [GitHub PAT](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token). If your organization uses SAML for Single Sign-On (SSO), you'll need to [authorize your PAT for SSO](https://docs.github.com/en/rest/overview/other-authentication-methods#authenticating-for-saml-sso). The pre-request script uses the [GitHub REST API](https://docs.github.com/en/rest/repos/contents#get-repository-content) to retrieve and decode the content.\n\nNOTE: At the moment only content on the default branch is retrieved.\n\nNOTE: This script assumes that the content residing at `path` is a [text file < 1MB in size](https://docs.github.com/en/rest/repos/contents#size-limits).\n\n## Using the Collection\n\n1.  Update the `GitHub_PAT` collection variable with your GitHub Personal Access Token (PAT). Your PAT will need [repo](https://docs.github.com/en/developers/apps/building-oauth-apps/scopes-for-oauth-apps#available-scopes) scope.  \n    **CAUTION**: Update the **current value** only to prevent your token leaking!!\n    1.  If you don't have a GitHub PAT, you can easily [create one](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token).\n2.  Run the Get collection and folder test snippets from GitHub request in the `Folder test levels` folder.  \n    Two sets of test code are loaded, one by the Collection pre-request script, the other by the folder pre-request script.  \n    The only code needed in the request itself are the 2 eval statements that load those snippets. SIMPLE!\n    \n\n## Collection variables\n\nThe following collection variables are designed to be edited by the end user as required. Other collection variables are for runtime use and are populated by code.\n\n| **Variable** | **Desc** |\n| --- | --- |\n| owner | GitHub owner of the repository containing the test script snippets. |\n| GitHub_repoSlug | GitHub repo \"slug\" of the repository containing the test script snippets.  <br>  <br>A \"slug\" is just the repo owner and repo name concatenated with a '/'  <br>**EXAMPLE:** octocat/my-repo |\n| Path_CollectionTestCode | Path of the file containing the collection level test script snippets within the repo. Path is relative to the root of the repo and does *not* include a leading slash.  <br>  <br>**EXAMPLE**: code-snippets/my-code-snippet.js |\n| Path_FolderTestCode | Path of the file containing the collection level test script snippets within the repo.  <br>  <br>**EXAMPLE**: code-snippets/my-code-snippet.js |\n| GitHub_PAT | Your [GitHub PAT](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token) with at least [repo](https://docs.github.com/en/developers/apps/building-oauth-apps/scopes-for-oauth-apps#available-scopes) scope.  <br>  <br>**CAUTION**: Update the current value only to prevent your token leaking!!  <br>  <br>**NOTE**: Could and probably should be managed at the environment level for use by teams/Enterprises.  <br> |\n| baseUrl | GitHub API base URL, currently `https://api.github.com` |",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23481657"
	},
	"item": [
		{
			"name": "Folder level tests",
			"item": [
				{
					"name": "Collection, Folder, and Request level scripts",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"eval(pm.collectionVariables.get(\"SrcCode_getFolderTests\"));",
									"",
									"//uncomment this line to load the Folder level tests",
									"//eval(pm.collectionVariables.get(\"SrcCode_getFolderTests\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Additional Request level tests go here",
									"",
									"pm.test(\"REQUEST Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://postman-echo.com/get",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"get"
							]
						},
						"description": "Runs reusable tests defined at the collection and folder level. Folder level tests are practical at the moment until it becomes possible to [identify the current folder](https://github.com/postmanlabs/postman-app-support/issues/6926) at runtime."
					},
					"response": []
				}
			],
			"description": "Shows the possibilities around defining different reusable test snippets at the Folder level.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"//This will be much more useful once it becomes possible to determine the current folder name",
							"// https://github.com/postmanlabs/postman-app-support/issues/6926",
							"",
							"eval(pm.collectionVariables.get(\"SrcCode_getFolderTests\"));",
							"",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"eval(pm.collectionVariables.get(\"SrcCode_FolderTests\"));"
						]
					}
				}
			]
		},
		{
			"name": "Collection and Request Level Tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"REQUEST Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//Do nothing, the collection level tests will run"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/get",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{postmanAPIKey}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "x-api-key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"eval(pm.collectionVariables.get(\"SrcCode_getCollectionTests\"));",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"eval(pm.collectionVariables.get(\"SrcCode_CollectionTests\"));"
				]
			}
		}
	],
	"variable": [
		{
			"key": "postmanAPIKey",
			"value": "<<Do not set initial value>>",
			"type": "string"
		},
		{
			"key": "GitHub_baseURL\n",
			"value": "https://api.github.com",
			"type": "string"
		},
		{
			"key": "GitHub_PAT",
			"value": "<<Your properly scoped GitHub PAT>>",
			"type": "string"
		},
		{
			"key": "GitHub_repoSlug",
			"value": "bryancross/Postman-stuff",
			"type": "string"
		},
		{
			"key": "GitHub_\nPath_CollectionTestCode",
			"value": "test-snippets/collection-level-tests.js",
			"type": "string"
		},
		{
			"key": "GitHub_\nPath_FolderTestCode",
			"value": "test-snippets/folder-level-tests.js",
			"type": "string"
		},
		{
			"key": "SrcCode_CollectionTests",
			"value": "<<Set at runtime>>"
		},
		{
			"key": "SrcCode_FolderTests",
			"value": "<<Set at Runtime>>",
			"type": "string"
		},
		{
			"key": "SrcCode_getCollectionTests",
			"value": "/*\n * Example showing the code to retrieve snippets from GitHub\n * at the collection level.  Stored in the SrcCode_getCollectionTests\n * environment variable\n*/\n\n//Setup the URL components\nvar owner = pm.collectionVariables.get(\"owner\");\nvar GitHub_repoSlug = pm.collectionVariables.get(\"GitHub_repoSlug\");\nvar path = pm.collectionVariables.get(\"Path_CollectionTestCode\");\nvar token = pm.collectionVariables.get(\"GitHub_PAT\");\nvar baseUrl = pm.collectionVariables.get(\"baseUrl\");\n//Build the URL\nvar url = baseUrl + \"/repos/\" + GitHub_repoSlug + \"/contents/\" + path;\nconsole.log(\"URL: \" + url);\nconst postRequest = {\n  url: url,\n  method: 'get',\n  header: {\n    'Content-Type': 'application/json',\n    'Authorization': 'bearer ' + token\n  }\n};\npm.sendRequest(postRequest, (err, res) => {\n    var jsonData = JSON.parse(res.text());\nvar base64content = jsonData.content;\nvar buff = new Buffer(base64content, 'base64');\nvar content = buff.toString('ascii');\npm.collectionVariables.set(\"SrcCode_CollectionTests\", content);\n\n});",
			"type": "string"
		},
		{
			"key": "SrcCode_getFolderTests",
			"value": "/*\n * Example showing the code to retrieve snippets from GitHub\n * at the collection level.  Stored in the SrcCode_getCollectionTests\n * environment variable\n*/\n//Setup the URL components\nvar owner = pm.collectionVariables.get(\"owner\");\nvar GitHub_repoSlug = pm.collectionVariables.get(\"GitHub_repoSlug\");\nvar path = pm.collectionVariables.get(\"Path_FolderTestCode\");\nvar token = pm.collectionVariables.get(\"GitHub_PAT\");\nvar baseUrl = pm.collectionVariables.get(\"baseUrl\");\n//Build the URL\nvar url = baseUrl + \"/repos/\" + GitHub_repoSlug + \"/contents/\" + path;\nconsole.log(\"URL: \" + url);\nconst postRequest = {\n  url: url,\n  method: 'get',\n  header: {\n    'Content-Type': 'application/json',\n    'Authorization': 'bearer ' + token\n  }\n};\npm.sendRequest(postRequest, (err, res) => {\n    var jsonData = JSON.parse(res.text());\nvar base64content = jsonData.content;\nvar buff = new Buffer(base64content, 'base64');\nvar content = buff.toString('ascii');\npm.collectionVariables.set(\"SrcCode_FolderTests\", content);\n});",
			"type": "string"
		}
	]
}